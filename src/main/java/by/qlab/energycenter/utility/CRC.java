package by.qlab.energycenter.utility;

public class CRC {
	private Short CRC;
	private byte[] buffer;
	private int length;
	public CRC(byte[] buffer) {
		super();
		this.buffer = buffer;
		this.length=buffer.length;

	}
	
	public short getCRC() {
		int ai[] = new int[256];
		ai[0]=0;ai[1]=193;ai[2]=129;ai[3]=64;ai[4]=1;ai[5]=192;ai[6]=128;ai[7]=65;ai[8]=1;ai[9]=192;ai[10]=128;ai[11]=65;ai[13]=193;ai[14]=129;ai[15]=64;ai[16]=1;ai[17]=192;ai[18]=128;ai[19]=65;ai[21]=193;ai[22]=129;ai[23]=64;ai[25]=193;ai[26]=129;ai[27]=64;ai[28]=1;ai[29]=192;ai[30]=128;ai[31]=65;ai[32]=1;ai[33]=192;ai[34]=128;ai[35]=65;ai[37]=193;ai[38]=129;ai[39]=64;ai[41]=193;ai[42]=129;ai[43]=64;ai[44]=1;ai[45]=192;ai[46]=128;ai[47]=65;ai[49]=193;ai[50]=129;ai[51]=64;ai[52]=1;ai[53]=192;ai[54]=128;ai[55]=65;ai[56]=1;ai[57]=192;ai[58]=128;ai[59]=65;ai[61]=193;ai[62]=129;ai[63]=64;ai[64]=1;ai[65]=192;ai[66]=128;ai[67]=65;ai[69]=193;ai[70]=129;ai[71]=64;ai[73]=193;ai[74]=129;ai[75]=64;ai[76]=1;ai[77]=192;ai[78]=128;ai[79]=65;ai[81]=193;ai[82]=129;ai[83]=64;ai[84]=1;ai[85]=192;ai[86]=128;ai[87]=65;ai[88]=1;ai[89]=192;ai[90]=128;ai[91]=65;ai[93]=193;ai[94]=129;ai[95]=64;ai[97]=193;ai[98]=129;ai[99]=64;ai[100]=1;ai[101]=192;ai[102]=128;ai[103]=65;ai[104]=1;ai[105]=192;ai[106]=128;ai[107]=65;ai[109]=193;ai[110]=129;ai[111]=64;ai[112]=1;ai[113]=192;ai[114]=128;ai[115]=65;ai[117]=193;ai[118]=129;ai[119]=64;ai[121]=193;ai[122]=129;ai[123]=64;ai[124]=1;ai[125]=192;ai[126]=128;ai[127]=65;ai[128]=1;ai[129]=192;ai[130]=128;ai[131]=65;ai[133]=193;ai[134]=129;ai[135]=64;ai[137]=193;ai[138]=129;ai[139]=64;ai[140]=1;ai[141]=192;ai[142]=128;ai[143]=65;ai[145]=193;ai[146]=129;ai[147]=64;ai[148]=1;ai[149]=192;ai[150]=128;ai[151]=65;ai[152]=1;ai[153]=192;ai[154]=128;ai[155]=65;ai[157]=193;ai[158]=129;ai[159]=64;ai[161]=193;ai[162]=129;ai[163]=64;ai[164]=1;ai[165]=192;ai[166]=128;ai[167]=65;ai[168]=1;ai[169]=192;ai[170]=128;ai[171]=65;ai[173]=193;ai[174]=129;ai[175]=64;ai[176]=1;ai[177]=192;ai[178]=128;ai[179]=65;ai[181]=193;ai[182]=129;ai[183]=64;ai[185]=193;ai[186]=129;ai[187]=64;ai[188]=1;ai[189]=192;ai[190]=128;ai[191]=65;ai[193]=193;ai[194]=129;ai[195]=64;ai[196]=1;ai[197]=192;ai[198]=128;ai[199]=65;ai[200]=1;ai[201]=192;ai[202]=128;ai[203]=65;ai[205]=193;ai[206]=129;ai[207]=64;ai[208]=1;ai[209]=192;ai[210]=128;ai[211]=65;ai[213]=193;ai[214]=129;ai[215]=64;ai[217]=193;ai[218]=129;ai[219]=64;ai[220]=1;ai[221]=192;ai[222]=128;ai[223]=65;ai[224]=1;ai[225]=192;ai[226]=128;ai[227]=65;ai[229]=193;ai[230]=129;ai[231]=64;ai[233]=193;ai[234]=129;ai[235]=64;ai[236]=1;ai[237]=192;ai[238]=128;ai[239]=65;ai[241]=193;ai[242]=129;ai[243]=64;ai[244]=1;ai[245]=192;ai[246]=128;ai[247]=65;ai[248]=1;ai[249]=192;ai[250]=128;ai[251]=65;ai[253]=193;ai[254]=129;ai[255]=64;
		int[] tblCRChi=ai;
		ai=new int[256];
		ai[0]=0;ai[1]=192;ai[2]=193;ai[3]=1;ai[4]=195;ai[5]=3;ai[6]=2;ai[7]=194;ai[8]=198;ai[9]=6;ai[10]=7;ai[11]=199;ai[12]=5;ai[13]=197;ai[14]=196;ai[15]=4;ai[16]=204;ai[17]=12;ai[18]=13;ai[19]=205;ai[20]=15;ai[21]=207;ai[22]=206;ai[23]=14;ai[24]=10;ai[25]=202;ai[26]=203;ai[27]=11;ai[28]=201;ai[29]=9;ai[30]=8;ai[31]=200;ai[32]=216;ai[33]=24;ai[34]=25;ai[35]=217;ai[36]=27;ai[37]=219;ai[38]=218;ai[39]=26;ai[40]=30;ai[41]=222;ai[42]=223;ai[43]=31;ai[44]=221;ai[45]=29;ai[46]=28;ai[47]=220;ai[48]=20;ai[49]=212;ai[50]=213;ai[51]=21;ai[52]=215;ai[53]=23;ai[54]=22;ai[55]=214;ai[56]=210;ai[57]=18;ai[58]=19;ai[59]=211;ai[60]=17;ai[61]=209;ai[62]=208;ai[63]=16;ai[64]=240;ai[65]=48;ai[66]=49;ai[67]=241;ai[68]=51;ai[69]=243;ai[70]=242;ai[71]=50;ai[72]=54;ai[73]=246;ai[74]=247;ai[75]=55;ai[76]=245;ai[77]=53;ai[78]=52;ai[79]=244;ai[80]=60;ai[81]=252;ai[82]=253;ai[83]=61;ai[84]=255;ai[85]=63;ai[86]=62;ai[87]=254;ai[88]=250;ai[89]=58;ai[90]=59;ai[91]=251;ai[92]=57;ai[93]=249;ai[94]=248;ai[95]=56;ai[96]=40;ai[97]=232;ai[98]=233;ai[99]=41;ai[100]=235;ai[101]=43;ai[102]=42;ai[103]=234;ai[104]=238;ai[105]=46;ai[106]=47;ai[107]=239;ai[108]=45;ai[109]=237;ai[110]=236;ai[111]=44;ai[112]=228;ai[113]=36;ai[114]=37;ai[115]=229;ai[116]=39;ai[117]=231;ai[118]=230;ai[119]=38;ai[120]=34;ai[121]=226;ai[122]=227;ai[123]=35;ai[124]=225;ai[125]=33;ai[126]=32;ai[127]=224;ai[128]=160;ai[129]=96;ai[130]=97;ai[131]=161;ai[132]=99;ai[133]=163;ai[134]=162;ai[135]=98;ai[136]=102;ai[137]=166;ai[138]=167;ai[139]=103;ai[140]=165;ai[141]=101;ai[142]=100;ai[143]=164;ai[144]=108;ai[145]=172;ai[146]=173;ai[147]=109;ai[148]=175;ai[149]=111;ai[150]=110;ai[151]=174;ai[152]=170;ai[153]=106;ai[154]=107;ai[155]=171;ai[156]=105;ai[157]=169;ai[158]=168;ai[159]=104;ai[160]=120;ai[161]=184;ai[162]=185;ai[163]=121;ai[164]=187;ai[165]=123;ai[166]=122;ai[167]=186;ai[168]=190;ai[169]=126;ai[170]=127;ai[171]=191;ai[172]=125;ai[173]=189;ai[174]=188;ai[175]=124;ai[176]=180;ai[177]=116;ai[178]=117;ai[179]=181;ai[180]=119;ai[181]=183;ai[182]=182;ai[183]=118;ai[184]=114;ai[185]=178;ai[186]=179;ai[187]=115;ai[188]=177;ai[189]=113;ai[190]=112;ai[191]=176;ai[192]=80;ai[193]=144;ai[194]=145;ai[195]=81;ai[196]=147;ai[197]=83;ai[198]=82;ai[199]=146;ai[200]=150;ai[201]=86;ai[202]=87;ai[203]=151;ai[204]=85;ai[205]=149;ai[206]=148;ai[207]=84;ai[208]=156;ai[209]=92;ai[210]=93;ai[211]=157;ai[212]=95;ai[213]=159;ai[214]=158;ai[215]=94;ai[216]=90;ai[217]=154;ai[218]=155;ai[219]=91;ai[220]=153;ai[221]=89;ai[222]=88;ai[223]=152;ai[224]=136;ai[225]=72;ai[226]=73;ai[227]=137;ai[228]=75;ai[229]=139;ai[230]=138;ai[231]=74;ai[232]=78;ai[233]=142;ai[234]=143;ai[235]=79;ai[236]=141;ai[237]=77;ai[238]=76;ai[239]=140;ai[240]=68;ai[241]=132;ai[242]=133;ai[243]=69;ai[244]=135;ai[245]=71;ai[246]=70;ai[247]=134;ai[248]=130;ai[249]=66;ai[250]=67;ai[251]=131;ai[252]=65;ai[253]=129;ai[254]=128;ai[255]=64;
		int[] tblCRClo=ai;
		byte byte0 = -1;
        byte byte1 = -1;

        int i = length;
        int j = 0;
        int k = byte1;
        do
        {
            if(i <= 0)
                return (short)((byte0 & 0xff) * 256 + (k & 0xff));
            short word0 = (short)((buffer[j] ^ byte0) & 0xff);
            byte0 = (byte)((tblCRChi[word0] ^ k) & 0xff);
            k = (byte)tblCRClo[word0];
            j++;
            i--;
        } while(true);

	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((CRC == null) ? 0 : CRC.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CRC other = (CRC) obj;
		if (CRC == null) {
			if (other.CRC != null)
				return false;
		} else if (!CRC.equals(other.CRC))
			return false;
		return true;
	}

	

	

	

	
}
